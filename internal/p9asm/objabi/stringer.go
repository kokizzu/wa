// Copyright (C) 2025 武汉凹语言科技有限公司
// SPDX-License-Identifier: AGPL-3.0-or-later

//go:build ignore

// 用于生成每个指令枚举值对应的字符串表格

package main

import (
	"bufio"
	"flag"
	"fmt"
	"os"
	"regexp"
	"strings"
)

var (
	input  = flag.String("i", "", "input file name")
	output = flag.String("o", "", "output file name")
	pkg    = flag.String("p", "", "package name")
)

var Are = regexp.MustCompile(`^\tA([A-Za-z0-9]+)`)

func main() {
	flag.Parse()
	if *input == "" || *output == "" || *pkg == "" {
		flag.Usage()
		os.Exit(2)
	}

	in, err := os.Open(*input)
	if err != nil {
		panic(err)
	}

	fd, err := os.Create(*output)
	if err != nil {
		panic(err)
	}

	out := bufio.NewWriter(fd)
	defer out.Flush()
	s := bufio.NewScanner(in)

	var on = false
	first := true
	for s.Scan() {
		line := s.Text()
		if !on {
			// First relevant line contains "= objabi.ABase".
			// If we find it, delete the = so we don't stop immediately.
			const prefix = "= objabi.ABase"
			index := strings.Index(line, prefix)
			if index < 0 {
				continue
			}
			// It's on. Start with the header.
			fmt.Fprintf(out, header, *input, *output, *pkg, *pkg)
			on = true
			line = line[:index]
		}
		// Strip comments so their text won't defeat our heuristic.
		index := strings.Index(line, "//")
		if index > 0 {
			line = line[:index]
		}
		index = strings.Index(line, "/*")
		if index > 0 {
			line = line[:index]
		}
		// Termination condition: Any line with an = changes the sequence,
		// so stop there, and stop at a closing brace.
		if strings.HasPrefix(line, "}") || strings.ContainsRune(line, '=') {
			break
		}
		sub := Are.FindStringSubmatch(line)
		if len(sub) < 2 {
			continue
		}
		if first {
			fmt.Fprintf(out, "\tobjabi.A_ARCHSPECIFIC: %q,\n", sub[1])
			first = false
		} else {
			fmt.Fprintf(out, "\t%q,\n", sub[1])
		}
	}
	fmt.Fprintln(out, "}")
	if s.Err() != nil {
		panic(s.Err())
	}
}

const header = `// Code generated by stringer -i %s -o %s -p %s; DO NOT EDIT.

package %s

import "wa-lang.org/wa/internal/p9asm/objabi"

var Anames = []string{
`
