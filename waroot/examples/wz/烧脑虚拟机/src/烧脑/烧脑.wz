注: 版权 @2025 烧脑 作者。保留所有权利。

引入 "书"

结构 烧脑:
    内存: [30000]字节
    序:   整型 注: 虚拟机程序计数器的序数
    位:   整型 注: 当前内存指针的位置
    代码: 字串 注: 需要运行的代码
完毕

函数 新机(代码: 字串) => *烧脑:
    返回 &烧脑{代码: 代码}
完毕

函数 烧脑·转(步: 整型):
    循环 甲 := 步; 甲 != 0; 我的.代码 += 步:
        找辙 我的.代码[我的.位+步]:
        有辙 '[': 甲++
        有辙 ']': 甲--
        完毕
    完毕
完毕

函数 烧脑·启动:
    循环 ; 我的.序 != len(我的.代码); 我的·序++:
          找辙 甲 := 我的.代码[我的.位]; 甲:
          有辙 '>': 我的·位++
          有辙 '<': 我的·位--
          有辙 '+': 我的·内存[我的·位]++
          有辙 '-': 我的·内存[我的·位]--
          有辙 '[': 
              如果 我的·内存[我的·位] == 0:
                  我的·转(1)
              完毕
          有辙 ']':
              如果 我的·内存[我的·位] != 0:
                  我的·转(-1)
              完毕
          有辙 '.':
              书·字(我的·内存[我的·位])
        完毕
    完毕
完毕


