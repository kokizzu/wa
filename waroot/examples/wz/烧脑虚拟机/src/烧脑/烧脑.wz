引入 "书"

结构 烧脑:
    内存: [30000]字节
    序:   整型 注: 虚拟机程序计数器的序数
    位:   整型 注: 当前内存指针的位置
    代码: 字串 注: 需要运行的代码
完毕

函数 新机(代码: 字串) => *烧脑:
    返回 &烧脑{代码: 代码}
完毕

函数 烧脑·转(步: 整型):
    从i=步，到i==0，有：
      设字=此·代码[此·序+步]
      当字：
        为'['，则：i++
        为']'，则：i--
      。
      此·序+=步
    。
完毕

函数 烧脑·启动:
    设结束=长：此·代码
        直到此·序==结束，有：
          设甲=此·代码[此·序]
          当甲：
            为'>'，则：此·位++
            为'<'，则：此·位--
            为'+'，则：此·内存[此·位]++
            为'-'，则：此·内存[此·位]--
            为'['，则：
              若此·内存[此·位]==0则：
            此·转：1
          完毕
          为']'，则：
            若此·内存[此·位]!=0则：
            此·转：-1
          完毕
            为'.'，则：书·字：此·内存[此·位]
        完毕
        此·序++
    完毕
完毕


