注: 版权 @2022 hello 作者。保留所有权利。

引入 "书"

函数·主控:
	注: 基本函数调用
	书·说("你好，凹语言！")

	注: 调用自定义函数
	书·说("[自定义函数]：40+2=")
	书·曰(加(40, 2))

	注: 简单的条件判断
	书·说("[条件判断]：")
	零 := 0
	//
	如果 零 == 1:
		书·说("是的，零和1是相等的。")
	否则:
		书·说("错了，零和1是不同的。")
	完毕

	注: 简单的自定义类型
	某 := 点{横: 10, 纵: 2}
	书·说("[自定义类型]点(10,2)的纵坐标和横坐标之和：")
	书·曰(某·横 + 某·纵)
	书·说("[自定义类型]点(10,2)的纵坐标和横坐标之平方和：")
	书·曰(某·平方距())

	注: 循环

	注: 类似range
	书·说("[简单范围] 从0到3：")
	循环 i := 迭代 3:
		书·曰(i)
	完毕

	注: 类似三段式for循环，注意，由于中英文语义不同，这里的j==8是停止条件，和for循环的“持续条件”正好相反
	书·说("[循环语句] 从0到8：")
	循环 j := 0; j <= 8; j++:
		书·曰(j)
	完毕

	书·说("[循环语句] 从10到0：")
	步 := 1
	循环 i := 0; i <= 10; i += 步:
		书·曰(i)
	完毕

	注: 类似until语句
	书·说("[直到语句] 直到5：")
	i := 0
	循环 i <= 5:
		书·曰(i)
		i++
	完毕

	注: 多路选择
	书·说("[多路输出]k=3")
	k := 3
	找辙 k:
	有辙 1:
		书·说("一")
	有辙 2:
		书·说("二")
	有辙 3:
		书·说("三")
	没辙:
		书·说("不中")
	完毕
完毕

结构·点:
	横: 整型
	纵: 整型
完毕

函数·点·平方距 => 整型:
	返回 我的·纵*我的·纵 + 我的·横*我的·横
完毕

函数·加(甲, 乙: 整型) => 整型:
	返回 甲 + 乙
完毕
