// 版权 @2023 mandelbrot 作者。保留所有权利。

import "js/canvas"
import "image"
import "image/color"
import "math/cmplx"
import "unsafe"

func main {
	println("你好，凹语言！")

	c, _ := canvas.QueryCanvas("canvas")
	ctx, _ := c.GetContext2D()

	const size = 400
	m := image.NewRGBA(size, size)
	println(m.Width, m.Height)

	for y := 0; y < size; y++ {
		yy := 4 * (f64(y)/size - 0.5) // [-2, 2]
		for x := 0; x < size; x++ {
			xx := 4 * (f64(x)/size - 0.5) // [-2, 2]
			m.SetRGBA(x, y, mandelbrot(complex(xx, yy)))
		}
	}

	ctx.PutImageData(
		unsafe.Raw(m.Pix), 0, 0, 0, 0,
		f32(m.Width), f32(m.Height),
	)
}

func mandelbrot(z: complex128) => color.RGBA {
	const iterations = 200
	const contrast = 15

	v: complex128
	for n := uint8(0); n < iterations; n++ {
		v = v*v + z
		if cmplx.Abs(v) > 2 {
			return getColor(n)
		}
	}
	return 0xFFFFFFFF
}

// 根据迭代次数计算一个合适的像素值
func getColor(n: u8) => color.RGBA {
	return paletted[int(n)]
}

global paletted = [16]color.RGBA{
	color.RGBA(0xFF000000 + (u32(66) << 0) + (u32(30) << 8) + (u32(15) << 16)),    // 66, 30, 15, 255},    // # brown 3
	color.RGBA(0xFF000000 + (u32(25) << 0) + (u32(7) << 8) + (u32(26) << 16)),     // 25, 7, 26, 255},     // # dark violett
	color.RGBA(0xFF000000 + (u32(9) << 0) + (u32(1) << 8) + (u32(47) << 16)),      // 9, 1, 47, 255},      //# darkest blue
	color.RGBA(0xFF000000 + (u32(4) << 0) + (u32(4) << 8) + (u32(73) << 16)),      // 4, 4, 73, 255},      //# blue 5
	color.RGBA(0xFF000000 + (u32(0) << 0) + (u32(7) << 8) + (u32(100) << 16)),     // 0, 7, 100, 255},     //# blue 4
	color.RGBA(0xFF000000 + (u32(12) << 0) + (u32(44) << 8) + (u32(138) << 16)),   // 12, 44, 138, 255},   //# blue 3
	color.RGBA(0xFF000000 + (u32(24) << 0) + (u32(82) << 8) + (u32(177) << 16)),   // 24, 82, 177, 255},   //# blue 2
	color.RGBA(0xFF000000 + (u32(57) << 0) + (u32(125) << 8) + (u32(209) << 16)),  // 57, 125, 209, 255},  //# blue 1
	color.RGBA(0xFF000000 + (u32(134) << 0) + (u32(181) << 8) + (u32(229) << 16)), // 134, 181, 229, 255}, // # blue 0
	color.RGBA(0xFF000000 + (u32(211) << 0) + (u32(236) << 8) + (u32(248) << 16)), // 211, 236, 248, 255}, // # lightest blue
	color.RGBA(0xFF000000 + (u32(241) << 0) + (u32(233) << 8) + (u32(191) << 16)), // 241, 233, 191, 255}, // # lightest yellow
	color.RGBA(0xFF000000 + (u32(248) << 0) + (u32(201) << 8) + (u32(95) << 16)),  // 248, 201, 95, 255},  // # light yellow
	color.RGBA(0xFF000000 + (u32(255) << 0) + (u32(170) << 8) + (u32(0) << 16)),   // 255, 170, 0, 255},   // # dirty yellow
	color.RGBA(0xFF000000 + (u32(204) << 0) + (u32(128) << 8) + (u32(0) << 16)),   // 204, 128, 0, 255},   // # brown 0
	color.RGBA(0xFF000000 + (u32(153) << 0) + (u32(87) << 8) + (u32(0) << 16)),    // 153, 87, 0, 255},    // # brown 1
	color.RGBA(0xFF000000 + (u32(106) << 0) + (u32(52) << 8) + (u32(3) << 16)),    // 106, 52, 3, 255},    // # brown 2
}
