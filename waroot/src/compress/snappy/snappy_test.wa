// Copyright (C) 2024 武汉凹语言科技有限公司
// SPDX-License-Identifier: MIT

import (
	"bytes"
	"errors"
	"strings"
)

func roundtrip(b, ebuf, dbuf: []byte) => error {
	d, err := Decode(dbuf, Encode(ebuf, b))
	if err != nil {
		return errors.New("decoding error: " + err.Error())
	}
	if !bytes.Equal(b, d) {
		return errors.New("roundtrip mismatch")
	}
	return nil
}

func TestEmpty {
	if err := roundtrip(nil, nil, nil); err != nil {
		assert(false, err.Error())
	}
}

func TestSmallCopy {
	for _, ebuf := range [][]byte{nil, make([]byte, 20), make([]byte, 64)} {
		for _, dbuf := range [][]byte{nil, make([]byte, 20), make([]byte, 64)} {
			for i := 0; i < 32; i++ {
				s := "aaaa" + strings.Repeat("b", i) + "aaaabbbb"
				if err := roundtrip([]byte(s), ebuf, dbuf); err != nil {
					assert(false, err.Error())
				}
			}
		}
	}
}

func TestSmallRegular {
	for n := 1; n < 20000; n += 23 {
		b := make([]byte, n)
		for i := range b {
			b[i] = uint8(i%10 + 'a')
		}
		if err := roundtrip(b, nil, nil); err != nil {
			assert(false, err.Error())
		}
	}
}

func TestInvalidVarint {
	data := []byte("\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00")
	if _, err := DecodedLen(data); err != ErrCorrupt {
		assert(false)
		//t.Errorf("DecodedLen: got %v, want ErrCorrupt", err)
	}
	if _, err := Decode(nil, data); err != ErrCorrupt {
		//t.Errorf("Decode: got %v, want ErrCorrupt", err)
		assert(false)
	}

	// The encoded varint overflows 32 bits
	data = []byte("\xff\xff\xff\xff\xff\x00")

	if _, err := DecodedLen(data); err != ErrCorrupt {
		//t.Errorf("DecodedLen: got %v, want ErrCorrupt", err)
		assert(false)
	}
	if _, err := Decode(nil, data); err != ErrCorrupt {
		//t.Errorf("Decode: got %v, want ErrCorrupt", err)
		assert(false)
	}
}
