// Copyright (C) 2024 武汉凹语言科技有限公司
// SPDX-License-Identifier: MIT

import "js"

// Adapter 对象，不能使用该类型直接声明值，需通过 RequestAdapter 创建
#wa:need-constructor
type Adapter :struct {
	_extobj: js.ExtObj
}

//---------------------------------------------------------------

// Features
func Adapter.Features() => SupportedFeatures {
	s: SupportedFeatures
	s._extobj = js.WrapExtObj(jsAdapterGetFeatures(this._extobj.GetHandle()))
	return s
}

#wa:import webgpu adapter_get_features
func jsAdapterGetFeatures(adapter: js.Handle) => js.Handle

// IsFallbackAdapter
func Adapter.IsFallbackAdapter() => bool {
	return jsAdapterGetIsFallbackAdapter(this._extobj.GetHandle())
}

#wa:import webgpu adapter_get_is_fallback_adapter
func jsAdapterGetIsFallbackAdapter(adapter: js.Handle) => bool

// Limits
func Adapter.Limits() => SupportedLimits {
	s: SupportedLimits
	s._extobj = js.WrapExtObj(jsAdapterGetLimits(this._extobj.GetHandle()))
	return s
}

#wa:import webgpu adapter_get_limits
func jsAdapterGetLimits(adapter: js.Handle) => js.Handle

// 获取 AdapterInfo，异步 - Todo
//func Adapter.RequestAdapterInfo

// 获取 Device，异步
#wa:generic RequestDevice_Handler
func Adapter.RequestDevice(requestor: DeviceRequestor) {
	if requestor == nil {
		panic("DeviceRequestor can't be nil.")
	}
	tid := asyncTasks.Alloc(nil, requestor)
	jsAdapterRequestDevice(tid, this._extobj.GetHandle(), 0)
}

type DeviceRequestor :interface {
	OnRequested(device: Device)
}

func Adapter.RequestDevice_Handler(handler: DeviceRequestHandler) {
	if handler == nil {
		panic("DeviceRequestHandler can't be nil.")
	}
	tid := asyncTasks.Alloc(nil, handler)
	jsAdapterRequestDevice(tid, this._extobj.GetHandle(), 0)
}

type DeviceRequestHandler :func(device: Device)

#wa:import webgpu adapter_request_device
func jsAdapterRequestDevice(tid: int, adapter: js.Handle, desc: js.Handle)

#wa:export gpu.onDeviceRequested
func onDeviceRequested(tid: int, dh: js.Handle) {
	_, handler := asyncTasks.Get(tid)
	device: Device
	device._extobj = js.WrapExtObj(dh)

	switch h := handler.(type) {
	case DeviceRequestor:
		h.OnRequested(device)

	case DeviceRequestHandler:
		h(device)
	}

	asyncTasks.Free(tid)
}

//---------------------------------------------------------------
