// Copyright (C) 2024 武汉凹语言科技有限公司
// SPDX-License-Identifier: MIT

const Size = 16

const BlockSize = 64

const (
	_Chunk = 64
	_Init0 = 0x67452301
	_Init1 = 0xEFCDAB89
	_Init2 = 0x98BADCFE
	_Init3 = 0x10325476
)

type Digest :struct {
	s:   [4]uint32
	x:   [_Chunk]byte
	nx:  int
	len: uint64
}

func (d: *Digest) Reset() {
	d.s[0] = _Init0
	d.s[1] = _Init1
	d.s[2] = _Init2
	d.s[3] = _Init3
	d.nx = 0
	d.len = 0
}

func New() => *Digest {
	d := new(Digest)
	d.Reset()
	return d
}

func (d: *Digest) Size() => int { return Size }

func (d: *Digest) BlockSize() => int { return BlockSize }

func (d: *Digest) Write(p: []byte) => (nn: int, err: error) {
	nn = len(p)
	d.len += uint64(nn)
	if d.nx > 0 {
		n := len(p)
		if n > _Chunk-d.nx {
			n = _Chunk - d.nx
		}
		for i := 0; i < n; i++ {
			d.x[d.nx+i] = p[i]
		}
		d.nx += n
		if d.nx == _Chunk {
			_Block(d, d.x[0:])
			d.nx = 0
		}
		p = p[n:]
	}
	n := _Block(d, p)
	p = p[n:]
	if len(p) > 0 {
		d.nx = copy(d.x[:], p)
	}
	return
}

func (d0: *Digest) Sum(in: []byte) => []byte {
	d := *d0

	len := d.len
	tmp: [64]byte
	tmp[0] = 0x80

	if len%64 < 56 {
		d.Write(tmp[0:int(56-len%64)])
	} else {
		d.Write(tmp[0:int(64+56-len%64)])
	}

	len <<= 3
	for i := uint(0); i < 8; i++ {
		tmp[i] = byte(len >> (8 * i))
	}
	d.Write(tmp[0:8])

	if d.nx != 0 {
		panic("d.nx != 0")
	}

	Digest: [Size]byte
	for i, s := range d.s {
		Digest[i*4] = byte(s)
		Digest[i*4+1] = byte(s >> 8)
		Digest[i*4+2] = byte(s >> 16)
		Digest[i*4+3] = byte(s >> 24)
	}

	return append(in, Digest[:]...)
}
