// Copyright (C) 2024 武汉凹语言科技有限公司
// SPDX-License-Identifier: MIT

// MaxLen is the maximum length of the string to be searched for (argument b) in Index.
// If MaxLen is not 0, make sure MaxLen >= 4.
global bytealg_MaxLen: int = 4

// PrimeRK is the prime base used in Rabin-Karp algorithm.
const bytealg_PrimeRK = 16777619

func bytealg_CountString(s: string, c: byte) => int {
	n := 0
	for _, v := range s {
		if rune(c) == v {
			n++
		}
	}
	return n
}

func bytealg_IndexByteString(s: string, c: byte) => int {
	for i := 0; i < len(s); i++ {
		if s[i] == c {
			return i
		}
	}
	return -1
}

// HashStrRevBytes returns the hash of the reverse of sep and the
// appropriate multiplicative factor for use in Rabin-Karp algorithm.
func bytealg_HashStrRevBytes(sep: []byte) => (u32, u32) {
	hash := uint32(0)
	for i := len(sep) - 1; i >= 0; i-- {
		hash = hash*bytealg_PrimeRK + uint32(sep[i])
	}
	pow, sq: u32 = 1, bytealg_PrimeRK
	for i := len(sep); i > 0; i >>= 1 {
		if i&1 != 0 {
			pow *= sq
		}
		sq *= sq
	}
	return hash, pow
}

// HashStrRev returns the hash of the reverse of sep and the
// appropriate multiplicative factor for use in Rabin-Karp algorithm.
func bytealg_HashStrRev(sep: string) => (uint32, uint32) {
	hash := uint32(0)
	for i := len(sep) - 1; i >= 0; i-- {
		hash = hash*bytealg_PrimeRK + uint32(sep[i])
	}
	pow, sq: uint32 = 1, bytealg_PrimeRK
	for i := len(sep); i > 0; i >>= 1 {
		if i&1 != 0 {
			pow *= sq
		}
		sq *= sq
	}
	return hash, pow
}

// IndexRabinKarp uses the Rabin-Karp search algorithm to return the index of the
// first occurrence of substr in s, or -1 if not present.
func bytealg_IndexRabinKarp(s, substr: string) => int {
	// Rabin-Karp search
	hashss, pow := bytealg_HashStr(substr)
	n := len(substr)
	h: uint32
	for i := 0; i < n; i++ {
		h = h*bytealg_PrimeRK + uint32(s[i])
	}
	if h == hashss && s[:n] == substr {
		return 0
	}
	for i := n; i < len(s); {
		h *= bytealg_PrimeRK
		h += uint32(s[i])
		h -= pow * uint32(s[i-n])
		i++
		if h == hashss && s[i-n:i] == substr {
			return i - n
		}
	}
	return -1
}

// HashStr returns the hash and the appropriate multiplicative
// factor for use in Rabin-Karp algorithm.
func bytealg_HashStr(sep: string) => (uint32, uint32) {
	hash := uint32(0)
	for i := 0; i < len(sep); i++ {
		hash = hash*bytealg_PrimeRK + uint32(sep[i])
	}
	pow, sq: uint32 = 1, bytealg_PrimeRK
	for i := len(sep); i > 0; i >>= 1 {
		if i&1 != 0 {
			pow *= sq
		}
		sq *= sq
	}
	return hash, pow
}

// Cutover reports the number of failures of IndexByte we should tolerate
// before switching over to Index.
// n is the number of bytes processed so far.
// See the bytes.Index implementation for details.
func bytealg_Cutover(n: int) => int {
	// 1 error per 8 characters, plus a few slop to start.
	return (n + 16) / 8
}
