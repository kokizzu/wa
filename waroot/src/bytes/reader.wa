// Copyright (C) 2024 武汉凹语言科技有限公司
// SPDX-License-Identifier: MIT

// Copyright 2012 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

import (
	"errors"
	"io"
	"unicode/utf8"
)

// A Reader implements the io.Reader, io.ReaderAt, io.WriterTo, io.Seeker,
// io.ByteScanner, and io.RuneScanner interfaces by reading from
// a byte slice.
// Unlike a Buffer, a Reader is read-only and supports seeking.
// The zero value for Reader operates like a Reader of an empty slice.
type Reader :struct {
	s:        []byte
	i:        i64 // current reading index
	prevRune: int // index of previous rune; or < 0
}

// Len returns the number of bytes of the unread portion of the
// slice.
func Reader.Len => int {
	r := this
	if r.i >= i64(len(r.s)) {
		return 0
	}
	return int(i64(len(r.s)) - r.i)
}

// Size returns the original length of the underlying byte slice.
// Size is the number of bytes available for reading via ReadAt.
// The returned value is always the same and is not affected by calls
// to any other method.
func Reader.Size => i64 {
	r := this
	return i64(len(r.s))
}

// Read implements the io.Reader interface.
func Reader.Read(b: []byte) => (n: int, err: error) {
	r := this
	if r.i >= i64(len(r.s)) {
		return 0, io.EOF
	}
	r.prevRune = -1
	n = copy(b, r.s[int(r.i):])
	r.i += i64(n)
	return
}

// ReadAt implements the io.ReaderAt interface.
func Reader.ReadAt(b: []byte, off: i64) => (n: int, err: error) {
	r := this
	// cannot modify state - see io.ReaderAt
	if off < 0 {
		return 0, errors.New("bytes.Reader.ReadAt: negative offset")
	}
	if off >= i64(len(r.s)) {
		return 0, io.EOF
	}
	n = copy(b, r.s[int(off):])
	if n < len(b) {
		err = io.EOF
	}
	return
}

// ReadByte implements the io.ByteReader interface.
func Reader.ReadByte => (byte, error) {
	r := this
	r.prevRune = -1
	if r.i >= i64(len(r.s)) {
		return 0, io.EOF
	}
	b := r.s[int(r.i)]
	r.i++
	return b, nil
}

// UnreadByte complements ReadByte in implementing the io.ByteScanner interface.
func Reader.UnreadByte => error {
	r := this
	if r.i <= 0 {
		return errors.New("bytes.Reader.UnreadByte: at beginning of slice")
	}
	r.prevRune = -1
	r.i--
	return nil
}

// ReadRune implements the io.RuneReader interface.
func Reader.ReadRune => (ch: rune, size: int, err: error) {
	r := this
	if r.i >= i64(len(r.s)) {
		r.prevRune = -1
		return 0, 0, io.EOF
	}
	r.prevRune = int(r.i)
	if c := r.s[r.i]; c < utf8.RuneSelf {
		r.i++
		return rune(c), 1, nil
	}
	ch, size = utf8.DecodeRune(r.s[int(r.i):])
	r.i += i64(size)
	return
}

// UnreadRune complements ReadRune in implementing the io.RuneScanner interface.
func Reader.UnreadRune => error {
	r := this
	if r.i <= 0 {
		return errors.New("bytes.Reader.UnreadRune: at beginning of slice")
	}
	if r.prevRune < 0 {
		return errors.New("bytes.Reader.UnreadRune: previous operation was not ReadRune")
	}
	r.i = i64(r.prevRune)
	r.prevRune = -1
	return nil
}

// Seek implements the io.Seeker interface.
func Reader.Seek(offset: i64, whence: int) => (i64, error) {
	r := this
	r.prevRune = -1
	abs: i64
	switch whence {
	case io.SeekStart:
		abs = offset
	case io.SeekCurrent:
		abs = r.i + offset
	case io.SeekEnd:
		abs = i64(len(r.s)) + offset
	default:
		return 0, errors.New("bytes.Reader.Seek: invalid whence")
	}
	if abs < 0 {
		return 0, errors.New("bytes.Reader.Seek: negative position")
	}
	r.i = abs
	return abs, nil
}

// WriteTo implements the io.WriterTo interface.
func Reader.WriteTo(w: io.Writer) => (n: i64, err: error) {
	r := this
	r.prevRune = -1
	if r.i >= i64(len(r.s)) {
		return 0, nil
	}
	b := r.s[int(r.i):]
	m, err := w.Write(b)
	if m > len(b) {
		panic("bytes.Reader.WriteTo: invalid Write count")
	}
	r.i += i64(m)
	n = i64(m)
	if m != len(b) && err == nil {
		err = io.ErrShortWrite
	}
	return
}

// Reset resets the Reader to be reading from b.
func Reader.Reset(b: []byte) {
	r := this
	*r = Reader{b, 0, -1}
}

// NewReader returns a new Reader reading from b.
func NewReader(b: []byte) => *Reader {
	return &Reader{b, 0, -1}
}
