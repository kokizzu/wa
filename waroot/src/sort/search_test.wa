// Copyright (C) 2024 武汉凹语言科技有限公司
// SPDX-License-Identifier: MIT

import "strings" => stringspkg

func f(a: []int, x: int) => func(int) => bool {
	return func(i: int) => bool {
		return a[i] >= x
	}
}

global data = []int{0: -10, 1: -5, 2: 0, 3: 1, 4: 2, 5: 3, 6: 5, 7: 7, 8: 11, 9: 100, 10: 100, 11: 100, 12: 1000, 13: 10000}

global tests = []struct {
	name: string
	n:    int
	f:    func(int) => bool
	i:    int
}{
	{"empty", 0, nil, 0},
	{"1 1", 1, func(i: int) => bool { return i >= 1 }, 1},
	{"1 true", 1, func(i: int) => bool { return true }, 0},
	{"1 false", 1, func(i: int) => bool { return false }, 1},
	{"1e9 991", 1e9, func(i: int) => bool { return i >= 991 }, 991},
	{"1e9 true", 1e9, func(i: int) => bool { return true }, 0},
	{"1e9 false", 1e9, func(i: int) => bool { return false }, 1e9},
	{"data -20", len(data), f(data, -20), 0},
	{"data -10", len(data), f(data, -10), 0},
	{"data -9", len(data), f(data, -9), 1},
	{"data -6", len(data), f(data, -6), 1},
	{"data -5", len(data), f(data, -5), 1},
	{"data 3", len(data), f(data, 3), 5},
	{"data 11", len(data), f(data, 11), 8},
	{"data 99", len(data), f(data, 99), 9},
	{"data 100", len(data), f(data, 100), 9},
	{"data 101", len(data), f(data, 101), 12},
	{"data 10000", len(data), f(data, 10000), 13},
	{"data 10001", len(data), f(data, 10001), 14},
	{"descending a", 7, func(i: int) => bool { return []int{99, 99, 59, 42, 7, 0, -1, -1}[i] <= 7 }, 4},
	{"descending 7", 1e9, func(i: int) => bool { return 1e9-i <= 7 }, 1e9 - 7},
	{"overflow", 2e9, func(i: int) => bool { return false }, 2e9},
}

func TestSearch {
	for _, e := range tests {
		i := Search(e.n, e.f)
		if i != e.i {
			assert(false)
			//t.Errorf("%s: expected index %d; got %d", e.name, e.i, i)
		}
	}
}

func TestFind {
	str1 := []string{"foo"}
	str2 := []string{"ab", "ca"}
	str3 := []string{"mo", "qo", "vo"}
	str4 := []string{"ab", "ad", "ca", "xy"}

	// slice with repeating elements
	strRepeats := []string{"ba", "ca", "da", "da", "da", "ka", "ma", "ma", "ta"}

	// slice with all element equal
	strSame := []string{"xx", "xx", "xx"}

	tests := []struct {
		data:      []string
		target:    string
		wantPos:   int
		wantFound: bool
	}{
		{[]string{}, "foo", 0, false},
		{[]string{}, "", 0, false},

		{str1, "foo", 0, true},
		{str1, "bar", 0, false},
		{str1, "zx", 1, false},

		{str2, "aa", 0, false},
		{str2, "ab", 0, true},
		{str2, "ad", 1, false},
		{str2, "ca", 1, true},
		{str2, "ra", 2, false},

		{str3, "bb", 0, false},
		{str3, "mo", 0, true},
		{str3, "nb", 1, false},
		{str3, "qo", 1, true},
		{str3, "tr", 2, false},
		{str3, "vo", 2, true},
		{str3, "xr", 3, false},

		{str4, "aa", 0, false},
		{str4, "ab", 0, true},
		{str4, "ac", 1, false},
		{str4, "ad", 1, true},
		{str4, "ax", 2, false},
		{str4, "ca", 2, true},
		{str4, "cc", 3, false},
		{str4, "dd", 3, false},
		{str4, "xy", 3, true},
		{str4, "zz", 4, false},

		{strRepeats, "da", 2, true},
		{strRepeats, "db", 5, false},
		{strRepeats, "ma", 6, true},
		{strRepeats, "mb", 8, false},

		{strSame, "xx", 0, true},
		{strSame, "ab", 0, false},
		{strSame, "zz", 3, false},
	}

	for _, tt := range tests {
		cmp := func(i: int) => int {
			return stringspkg.Compare(tt.target, tt.data[i])
		}

		pos, found := Find(len(tt.data), cmp)
		if pos != tt.wantPos || found != tt.wantFound {
			assert(false)
			//t.Errorf("Find got (%v, %v), want (%v, %v)", pos, found, tt.wantPos, tt.wantFound)
		}
	}
}
