// Copyright (C) 2024 武汉凹语言科技有限公司
// SPDX-License-Identifier: MIT

//
// Red-Black tree properties:  http://en.wikipedia.org/wiki/rbtree
//
//  1) A node is either red or black
//  2) The root is black
//  3) All leaves (NULL) are black
//  4) Both children of every red node are black
//  5) Every simple path from root to leaves contains the same number
//     of black nodes.
//

type (
	mapColor   :int
	mapNodeIdx :int
)

const (
	mapRED   :mapColor = 0
	mapBLACK :mapColor = 1
)

type mapImp :struct {
	NIL:   *mapNode
	root:  *mapNode
	nodes: []*mapNode // 第0个是NIL节点
}

type mapNode :struct {
	parentIdx: mapNodeIdx // 用索引避免出现环
	NodeIdx:   mapNodeIdx // 当前节点所在索引下标, 用于删除 m.nodes[x.NodeIdx]

	Left:  *mapNode
	Right: *mapNode
	Color: mapColor

	Key: interface{}
	Val: interface{}
}

type mapIter :struct {
	m:   *mapImp
	pos: int
}

func mapNode.Parent(m: *mapImp) => *mapNode {
	return m.nodes[this.parentIdx]
}

func mapNode.SetParent(x: *mapNode) {
	this.parentIdx = x.NodeIdx
}

#wa:linkname runtime.mapMake
func mapMake() => *mapImp {
	NIL := &mapNode{Color: mapBLACK}
	return &mapImp{
		NIL:   NIL,
		root:  NIL,
		nodes: []*mapNode{NIL},
	}
}

#wa:linkname runtime.mapUpdate
func mapUpdate(m: *mapImp, k, v: interface{}) {
	if m == nil {
		panic("nil map.")
	}
	m.Update(k, v)
}

#wa:linkname runtime.mapLookup
func mapLookup(m: *mapImp, k: interface{}) => (interface{}, bool) {
	if m == nil {
		return nil, false
	}
	return m.Lookup(k)
}

#wa:linkname runtime.mapLen
func mapLen(m: *mapImp) => int {
	if m == nil {
		return 0
	}
	return m.Len()
}

#wa:linkname runtime.mapNext
func mapNext(iter: mapIter) => (ok: bool, k, v: interface{}, pos: int) {
	if iter.m == nil {
		return false, nil, nil, iter.pos
	}

	ok, k, v = iter.Next()
	pos = iter.pos
	return
}

#wa:linkname runtime.mapDelete
func mapDelete(m: *mapImp, k: interface{}) {
	if m == nil {
		return
	}
	m.Delete(k)
}

func mapImp.Len() => int {
	return len(this.nodes) - 1 // 第0个是NIL节点
}

func mapImp.Update(k, v: interface{}) {
	if ret := this.search(k); ret == this.NIL {
		node := &mapNode{
			NodeIdx: mapNodeIdx(len(this.nodes)),
			Left:    this.NIL,
			Right:   this.NIL,
			Color:   mapRED,
			Key:     k,
			Val:     v,
		}
		this.nodes = append(this.nodes, node)
		this.insert(node)
	} else {
		ret.Val = v
	}
}

func mapImp.Lookup(k: interface{}) => (interface{}, bool) {
	if ret := this.search(k); ret != this.NIL {
		return ret.Val, true
	} else {
		return nil, false
	}
}

func mapImp.Delete(k: interface{}) {
	z := this.search(k)
	if z == this.NIL {
		return
	}

	// 从树中删除
	this.delete(z)

	// 如果不是最后一个, 则用最后一个节点覆盖
	if z.NodeIdx < mapNodeIdx(len(this.nodes)-1) {
		lastNode := this.nodes[len(this.nodes)-1]
		lastNode.NodeIdx = z.NodeIdx
		this.nodes[z.NodeIdx] = lastNode

		// 更新左右子节点
		if lastNode.Left != this.NIL {
			lastNode.Left.SetParent(lastNode)
		}
		if lastNode.Right != this.NIL {
			lastNode.Right.SetParent(lastNode)
		}
	}

	// 从节点列表删除
	this.nodes = this.nodes[:len(this.nodes)-1]
}

func mapImp.leftRotate(x: *mapNode) {
	// Since we are doing the left rotation, the right child should *NOT* nil.
	if x.Right == this.NIL {
		return
	}

	//
	// The illation of left rotation
	//
	//          |                                  |
	//          X                                  Y
	//         / \         left rotate            / \
	//        α  Y       ------------->         X   γ
	//           / \                            / \
	//          β  γ                         α  β
	//
	// It should be note that during the rotating we do not change
	// the Nodes' color.
	//
	y := x.Right
	x.Right = y.Left
	if y.Left != this.NIL {
		y.Left.SetParent(x)
	}
	y.SetParent(x.Parent(this))

	if x.Parent(this) == this.NIL {
		this.root = y
	} else if x == x.Parent(this).Left {
		x.Parent(this).Left = y
	} else {
		x.Parent(this).Right = y
	}

	y.Left = x
	x.SetParent(y)
}

func mapImp.rightRotate(x: *mapNode) {
	// Since we are doing the right rotation, the left child should *NOT* nil.
	if x.Left == this.NIL {
		return
	}

	//
	// The illation of right rotation
	//
	//          |                                  |
	//          X                                  Y
	//         / \         right rotate           / \
	//        Y   γ      ------------->         α  X
	//       / \                                    / \
	//      α  β                                 β  γ
	//
	// It should be note that during the rotating we do not change
	// the Nodes' color.
	//
	y := x.Left
	x.Left = y.Right
	if y.Right != this.NIL {
		y.Right.SetParent(x)
	}
	y.SetParent(x.Parent(this))

	if x.Parent(this) == this.NIL {
		this.root = y
	} else if x == x.Parent(this).Left {
		x.Parent(this).Left = y
	} else {
		x.Parent(this).Right = y
	}

	y.Right = x
	x.SetParent(y)
}

func mapImp.insert(z: *mapNode) => *mapNode {
	x := this.root
	y := this.NIL

	for x != this.NIL {
		y = x
		if Compare(z.Key, x.Key) < 0 {
			x = x.Left
		} else if Compare(x.Key, z.Key) < 0 {
			x = x.Right
		} else {
			return x
		}
	}

	z.SetParent(y)
	if y == this.NIL {
		this.root = z
	} else if Compare(z.Key, y.Key) < 0 {
		y.Left = z
	} else {
		y.Right = z
	}

	this.insertFixup(z)
	return z
}

func mapImp.insertFixup(z: *mapNode) {
	for z.Parent(this).Color == mapRED {
		//
		// Howerver, we do not need the assertion of non-nil grandparent
		// because
		//
		//  2) The root is black
		//
		// Since the color of the parent is mapRED, so the parent is not root
		// and the grandparent must be exist.
		//
		if z.Parent(this) == z.Parent(this).Parent(this).Left {
			// Take y as the uncle, although it can be NIL, in that case
			// its color is mapBLACK
			y := z.Parent(this).Parent(this).Right
			if y.Color == mapRED {
				//
				// Case 1:
				// Parent and uncle are both mapRED, the grandparent must be mapBLACK
				// due to
				//
				//  4) Both children of every red node are black
				//
				// Since the current node and its parent are all mapRED, we still
				// in violation of 4), So repaint both the parent and the uncle
				// to mapBLACK and grandparent to mapRED(to maintain 5)
				//
				//  5) Every simple path from root to leaves contains the same
				//     number of black nodes.
				//
				z.Parent(this).Color = mapBLACK
				y.Color = mapBLACK
				z.Parent(this).Parent(this).Color = mapRED
				z = z.Parent(this).Parent(this)
			} else {
				if z == z.Parent(this).Right {
					//
					// Case 2:
					// Parent is mapRED and uncle is mapBLACK and the current node
					// is right child
					//
					// A left rotation on the parent of the current node will
					// switch the roles of each other. This still leaves us in
					// violation of 4).
					// The continuation into Case 3 will fix that.
					//
					z = z.Parent(this)
					this.leftRotate(z)
				}
				//
				// Case 3:
				// Parent is mapRED and uncle is mapBLACK and the current node is
				// left child
				//
				// At the very beginning of Case 3, current node and parent are
				// both mapRED, thus we violate 4).
				// Repaint parent to mapBLACK will fix it, but 5) does not allow
				// this because all paths that go through the parent will get
				// 1 more black node. Then repaint grandparent to mapRED (as we
				// discussed before, the grandparent is mapBLACK) and do a right
				// rotation will fix that.
				//
				z.Parent(this).Color = mapBLACK
				z.Parent(this).Parent(this).Color = mapRED
				this.rightRotate(z.Parent(this).Parent(this))
			}
		} else { // same as then clause with "right" and "left" exchanged
			y := z.Parent(this).Parent(this).Left
			if y.Color == mapRED {
				z.Parent(this).Color = mapBLACK
				y.Color = mapBLACK
				z.Parent(this).Parent(this).Color = mapRED
				z = z.Parent(this).Parent(this)
			} else {
				if z == z.Parent(this).Left {
					z = z.Parent(this)
					this.rightRotate(z)
				}
				z.Parent(this).Color = mapBLACK
				z.Parent(this).Parent(this).Color = mapRED
				this.leftRotate(z.Parent(this).Parent(this))
			}
		}
	}
	this.root.Color = mapBLACK
}

// Just traverse the node from root to left recursively until left is NIL.
// The node whose left is NIL is the node with minimum value.
func mapImp.min(x: *mapNode) => *mapNode {
	if x == this.NIL {
		return this.NIL
	}

	for x.Left != this.NIL {
		x = x.Left
	}

	return x
}

func mapImp.search(key: interface{}) => *mapNode {
	p := this.root

	for p != this.NIL {
		if cmp := Compare(p.Key, key); cmp < 0 {
			p = p.Right
		} else if cmp > 0 {
			p = p.Left
		} else {
			return p
		}
	}

	return p
}

func mapImp.successor(x: *mapNode) => *mapNode {
	if x == this.NIL {
		return this.NIL
	}

	// Get the minimum from the right sub-tree if it existed.
	if x.Right != this.NIL {
		return this.min(x.Right)
	}

	y := x.Parent(this)
	for y != this.NIL && x == y.Right {
		x = y
		y = y.Parent(this)
	}
	return y
}

func mapImp.delete(z: *mapNode) => (valIdx: int) {
	y: *mapNode
	x: *mapNode

	if z.Left == this.NIL || z.Right == this.NIL {
		y = z
	} else {
		y = this.successor(z)
	}

	if y.Left != this.NIL {
		x = y.Left
	} else {
		x = y.Right
	}

	// Even if x is NIL, we do the assign. In that case all the NIL nodes will
	// change from {nil, nil, nil, mapBLACK, nil} to {nil, nil, ADDR, mapBLACK, nil},
	// but do not worry about that because it will not affect the compare
	// between mapNode-X with mapNode-NIL
	x.SetParent(y.Parent(this))

	if y.Parent(this) == this.NIL {
		this.root = x
	} else if y == y.Parent(this).Left {
		y.Parent(this).Left = x
	} else {
		y.Parent(this).Right = x
	}

	if y != z {
		z = y
	}

	if y.Color == mapBLACK {
		this.deleteFixup(x)
	}

	return
}

func mapImp.deleteFixup(x: *mapNode) {
	for x != this.root && x.Color == mapBLACK {
		if x == x.Parent(this).Left {
			w := x.Parent(this).Right
			if w.Color == mapRED {
				w.Color = mapBLACK
				x.Parent(this).Color = mapRED
				this.leftRotate(x.Parent(this))
				w = x.Parent(this).Right
			}
			if w.Left.Color == mapBLACK && w.Right.Color == mapBLACK {
				w.Color = mapRED
				x = x.Parent(this)
			} else {
				if w.Right.Color == mapBLACK {
					w.Left.Color = mapBLACK
					w.Color = mapRED
					this.rightRotate(w)
					w = x.Parent(this).Right
				}
				w.Color = x.Parent(this).Color
				x.Parent(this).Color = mapBLACK
				w.Right.Color = mapBLACK
				this.leftRotate(x.Parent(this))
				// this is to exit while loop
				x = this.root
			}
		} else { // the code below is has left and right switched from above
			w := x.Parent(this).Left
			if w.Color == mapRED {
				w.Color = mapBLACK
				x.Parent(this).Color = mapRED
				this.rightRotate(x.Parent(this))
				w = x.Parent(this).Left
			}
			if w.Left.Color == mapBLACK && w.Right.Color == mapBLACK {
				w.Color = mapRED
				x = x.Parent(this)
			} else {
				if w.Left.Color == mapBLACK {
					w.Right.Color = mapBLACK
					w.Color = mapRED
					this.leftRotate(w)
					w = x.Parent(this).Left
				}
				w.Color = x.Parent(this).Color
				x.Parent(this).Color = mapBLACK
				w.Left.Color = mapBLACK
				this.rightRotate(x.Parent(this))
				x = this.root
			}
		}
	}
	x.Color = mapBLACK
}

func makeMapIter(m: *mapImp) => *mapIter {
	return &mapIter{m: m}
}

func mapIter.Next() => (ok: bool, k, v: interface{}) {
	if this.pos >= this.m.Len() {
		return
	}

	this.pos++
	node := this.m.nodes[this.pos]

	ok = true
	k = node.Key
	v = node.Val

	return
}
