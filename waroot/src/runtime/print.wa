// Copyright (C) 2024 武汉凹语言科技有限公司
// SPDX-License-Identifier: MIT

// 依赖以下函数(不同平台实现不同)
// waPuts
// waPrintRune

func printBytes(b: []byte) {
	if n := len(b); n > 0 {
		waPuts(refToPtr_byteSlice(b), i32(n))
		return
	}
}

func printString(s: string) {
	if n := len(s); n > 0 {
		waPuts(refToPtr_string(s), i32(n))
		return
	}
}

func printSpace {
	printString(" ")
}

func printNewline {
	printString("\n")
}

func printBool(v: bool) {
	if v {
		printString("true")
	} else {
		printString("false")
	}
}

func printF64(v: f64) {
	switch {
	case v != v:
		printString("NaN")
		return
	case v+v == v && v > 0:
		printString("+Inf")
		return
	case v+v == v && v < 0:
		printString("-Inf")
		return
	}

	const n = 7 // digits printed
	buf: [n + 7]byte
	buf[0] = '+'
	e := 0 // exp
	if v == 0 {
		if 1/v < 0 {
			buf[0] = '-'
		}
	} else {
		if v < 0 {
			v = -v
			buf[0] = '-'
		}

		// normalize
		for v >= 10 {
			e++
			v /= 10
		}
		for v < 1 {
			e--
			v *= 10
		}

		// round
		h := 5.0
		for i := 0; i < n; i++ {
			h /= 10
		}
		v += h
		if v >= 10 {
			e++
			v /= 10
		}
	}

	// format +d.dddd+edd
	for i := 0; i < n; i++ {
		s := int(v)
		buf[i+2] = byte(s + '0')
		v -= float64(s)
		v *= 10
	}
	buf[1] = buf[2]
	buf[2] = '.'

	buf[n+2] = 'e'
	buf[n+3] = '+'
	if e < 0 {
		e = -e
		buf[n+3] = '-'
	}

	buf[n+4] = byte(e/100) + '0'
	buf[n+5] = byte(e/10)%10 + '0'
	buf[n+6] = byte(e%10) + '0'

	printBytes(buf[:])
}

func printU64(v: u64) {
	buf: [64]byte
	i := len(buf)
	for i--; i > 0; i-- {
		buf[i] = byte(v%10 + '0')
		if v < 10 {
			break
		}
		v /= 10
	}
	printBytes(buf[i:])
}

func printI64(v: i64) {
	if v < 0 {
		printString("-")
		v = -v
	}
	printU64(u64(v))
}

func printHex(v: u64) {
	const dig = "0123456789abcdef"
	buf: [64]byte
	i := len(buf)
	for i--; i > 0; i-- {
		buf[i] = dig[v%16]
		if v < 16 {
			break
		}
		v /= 16
	}
	i--
	buf[i] = 'x'
	i--
	buf[i] = '0'
	printBytes(buf[i:])
}

func printSlice(s: []byte) {
	print("[", len(s), "/", cap(s), "]")
	printHex(u64(refToPtr_byteSlice(s)))
}
