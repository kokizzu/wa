// Copyright (C) 2024 武汉凹语言科技有限公司
// SPDX-License-Identifier: MIT

import "math/bits"

func AAA {
	println(bits.UintSize)
}

const (
	_S = _W / 8 // 字宽（以字节为单位）

	_W = bits.UintSize // 字宽（以位为单位）
	_B = 1 << _W       // 基数
	_M = _B - 1        // 基数掩码
)

// z1<<_W + z0 = x*y
func mulWW(x, y: uint) => (z1, z0: uint) {
	return bits.Mul(x, y)
}

// z1<<_W + z0 = x*y + c
func mulAddWWW(x, y, c: uint) => (z1, z0: uint) {
	hi, lo := bits.Mul(x, y)
	cc: uint
	lo, cc = bits.Add(lo, c, 0)
	return hi + cc, lo
}

// nlz returns the number of leading zeros in x.
// Wraps bits.LeadingZeros call for convenience.
func nlz(x: uint) => uint {
	return uint(bits.LeadingZeros(x))
}

// The resulting carry c is either 0 or 1.
func addVV(z, x, y: []uint) => (c: uint) {
	for i := 0; i < len(z) && i < len(x) && i < len(y); i++ {
		zi, cc := bits.Add(x[i], y[i], c)
		z[i] = zi
		c = cc
	}
	return
}

// The resulting carry c is either 0 or 1.
func subVV(z, x, y: []uint) => (c: uint) {
	for i := 0; i < len(z) && i < len(x) && i < len(y); i++ {
		zi, cc := bits.Sub(x[i], y[i], c)
		z[i] = zi
		c = cc
	}
	return
}

// The resulting carry c is either 0 or 1.
func addVW(z, x: []uint, y: uint) => (c: uint) {
	c = y
	for i := 0; i < len(z) && i < len(x); i++ {
		zi, cc := bits.Add(x[i], c, 0)
		z[i] = zi
		c = cc
	}
	return
}

func subVW(z, x: []uint, y: uint) => (c: uint) {
	c = y
	for i := 0; i < len(z) && i < len(x); i++ {
		zi, cc := bits.Sub(x[i], c, 0)
		z[i] = zi
		c = cc
	}
	return
}

func shlVU(z, x: []uint, s: uint) => (c: uint) {
	if s == 0 {
		copy(z, x)
		return
	}
	if len(z) == 0 {
		return
	}
	s &= _W - 1 // hint to the compiler that shifts by s don't need guard code
	ŝ := _W - s
	ŝ &= _W - 1 // ditto
	c = x[len(z)-1] >> ŝ
	for i := len(z) - 1; i > 0; i-- {
		z[i] = x[i]<<s | x[i-1]>>ŝ
	}
	z[0] = x[0] << s
	return
}

func shrVU(z, x: []uint, s: uint) => (c: uint) {
	if s == 0 {
		copy(z, x)
		return
	}
	if len(z) == 0 {
		return
	}
	if len(x) != len(z) {
		// This is an invariant guaranteed by the caller.
		panic("len(x) != len(z)")
	}
	s &= _W - 1 // hint to the compiler that shifts by s don't need guard code
	ŝ := _W - s
	ŝ &= _W - 1 // ditto
	c = x[0] << ŝ
	for i := 1; i < len(z); i++ {
		z[i-1] = x[i-1]>>s | x[i]<<ŝ
	}
	z[len(z)-1] = x[len(z)-1] >> s
	return
}

func mulAddVWW(z, x: []uint, y, r: uint) => (c: uint) {
	c = r
	for i := 0; i < len(z) && i < len(x); i++ {
		c, z[i] = mulAddWWW(x[i], y, c)
	}
	return
}

func addMulVVW(z, x: []uint, y: uint) => (c: uint) {
	for i := 0; i < len(z) && i < len(x); i++ {
		z1, z0 := mulAddWWW(x[i], y, z[i])
		lo, cc := bits.Add(z0, c, 0)
		c, z[i] = cc, lo
		c += z1
	}
	return
}

// q = ( x1 << _W + x0 - r)/y. m = floor(( _B^2 - 1 ) / d - _B). Requiring x1<y.
// An approximate reciprocal with a reference to "Improved Division by Invariant Integers
// (IEEE Transactions on Computers, 11 Jun. 2010)"
func divWW(x1, x0, y, m: uint) => (q, r: uint) {
	s := nlz(y)
	if s != 0 {
		x1 = x1<<s | x0>>(_W-s)
		x0 <<= s
		y <<= s
	}
	d := y
	// We know that
	//   m = ⎣(B^2-1)/d⎦-B
	//   ⎣(B^2-1)/d⎦ = m+B
	//   (B^2-1)/d = m+B+delta1    0 <= delta1 <= (d-1)/d
	//   B^2/d = m+B+delta2        0 <= delta2 <= 1
	// The quotient we're trying to compute is
	//   quotient = ⎣(x1*B+x0)/d⎦
	//            = ⎣(x1*B*(B^2/d)+x0*(B^2/d))/B^2⎦
	//            = ⎣(x1*B*(m+B+delta2)+x0*(m+B+delta2))/B^2⎦
	//            = ⎣(x1*m+x1*B+x0)/B + x0*m/B^2 + delta2*(x1*B+x0)/B^2⎦
	// The latter two terms of this three-term sum are between 0 and 1.
	// So we can compute just the first term, and we will be low by at most 2.
	t1, t0 := bits.Mul(m, x1)
	_, c := bits.Add(t0, x0, 0)
	t1, _ = bits.Add(t1, x1, c)
	// The quotient is either t1, t1+1, or t1+2.
	// We'll try t1 and adjust if needed.
	qq := t1
	// compute remainder r=x-d*q.
	dq1, dq0 := bits.Mul(d, qq)
	r0, b := bits.Sub(x0, dq0, 0)
	r1, _ := bits.Sub(x1, dq1, b)
	// The remainder we just computed is bounded above by B+d:
	// r = x1*B + x0 - d*q.
	//   = x1*B + x0 - d*⎣(x1*m+x1*B+x0)/B⎦
	//   = x1*B + x0 - d*((x1*m+x1*B+x0)/B-alpha)                                   0 <= alpha < 1
	//   = x1*B + x0 - x1*d/B*m                         - x1*d - x0*d/B + d*alpha
	//   = x1*B + x0 - x1*d/B*⎣(B^2-1)/d-B⎦             - x1*d - x0*d/B + d*alpha
	//   = x1*B + x0 - x1*d/B*⎣(B^2-1)/d-B⎦             - x1*d - x0*d/B + d*alpha
	//   = x1*B + x0 - x1*d/B*((B^2-1)/d-B-beta)        - x1*d - x0*d/B + d*alpha   0 <= beta < 1
	//   = x1*B + x0 - x1*B + x1/B + x1*d + x1*d/B*beta - x1*d - x0*d/B + d*alpha
	//   =        x0        + x1/B        + x1*d/B*beta        - x0*d/B + d*alpha
	//   = x0*(1-d/B) + x1*(1+d*beta)/B + d*alpha
	//   <  B*(1-d/B) +  d*B/B          + d          because x0<B (and 1-d/B>0), x1<d, 1+d*beta<=B, alpha<1
	//   =  B - d     +  d              + d
	//   = B+d
	// So r1 can only be 0 or 1. If r1 is 1, then we know q was too small.
	// Add 1 to q and subtract d from r. That guarantees that r is <B, so
	// we no longer need to keep track of r1.
	if r1 != 0 {
		qq++
		r0 -= d
	}
	// If the remainder is still too large, increment q one more time.
	if r0 >= d {
		qq++
		r0 -= d
	}
	return qq, r0 >> s
}

// reciprocalWord return the reciprocal of the divisor. rec = floor(( _B^2 - 1 ) / u - _B). u = d1 << nlz(d1).
func reciprocalWord(d1: uint) => uint {
	u := uint(d1 << nlz(d1))
	x1 := ^u
	x0 := uint(_M)
	rec, _ := bits.Div(x1, x0, u) // (_B^2-1)/U-_B = (_B*(_M-C)+_M)/U
	return uint(rec)
}
