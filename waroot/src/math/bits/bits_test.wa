// Copyright (C) 2024 武汉凹语言科技有限公司
// SPDX-License-Identifier: MIT

// ----------------------------------------------------------------------------
// Testing support

const DeBruijn64 = deBruijn64

type entry :struct {
	nlz, ntz, pop: int
}

// tab contains results for all uint8 values
global tab: [256]entry

func init() {
	tab[0] = entry{8, 8, 0}
	for i := 1; i < len(tab); i++ {
		// nlz
		x := i // x != 0
		n := 0
		for x&0x80 == 0 {
			n++
			x <<= 1
		}
		tab[i].nlz = n

		// ntz
		x = i // x != 0
		n = 0
		for x&1 == 0 {
			n++
			x >>= 1
		}
		tab[i].ntz = n

		// pop
		x = i // x != 0
		n = 0
		for x != 0 {
			n += int(x & 1)
			x >>= 1
		}
		tab[i].pop = n
	}
}

// ----------------------------------------------------------------------------

func TestUintSize {
	assert(UintSize == 32)
}

func TestLeadingZeros {
	for i := 0; i < 256; i++ {
		nlz := tab[i].nlz
		for k := 0; k < 64-8; k++ {
			x := u64(i) << uint(k)
			if x <= 1<<8-1 {
				got := LeadingZeros8(uint8(x))
				want := nlz - k + (8 - 8)
				if x == 0 {
					want = 8
				}
				assert(got == want, "LeadingZeros8 got != want")
			}

			if x <= 1<<16-1 {
				got := LeadingZeros16(uint16(x))
				want := nlz - k + (16 - 8)
				if x == 0 {
					want = 16
				}
				assert(got == want, "LeadingZeros16 got != want")
			}

			if x <= 1<<32-1 {
				got := LeadingZeros32(uint32(x))
				want := nlz - k + (32 - 8)
				if x == 0 {
					want = 32
				}

				assert(got == want, "LeadingZeros32 got != want")

				if UintSize == 32 {
					got = LeadingZeros(uint(x))
					if got != want {
						assert(got == want, "LeadingZeros got != want")
					}
				}
			}

			if x <= 1<<64-1 {
				got := LeadingZeros64(u64(x))
				want := nlz - k + (64 - 8)
				if x == 0 {
					want = 64
				}
				assert(got == want, "LeadingZeros64 got != want")
				if UintSize == 64 {
					got = LeadingZeros(uint(x))
					if got != want {
						assert(got == want, "LeadingZeros got != want")
					}
				}
			}
		}
	}
}

func TestTrailingZeros {
	for i := 0; i < 256; i++ {
		ntz := tab[i].ntz
		for k := 0; k < 64-8; k++ {
			x := u64(i) << uint(k)
			want := ntz + k
			if x <= 1<<8-1 {
				got := TrailingZeros8(u8(x))
				if x == 0 {
					want = 8
				}
				if got != want {
					assert(got == want, "TrailingZeros8 got != want")
				}
			}

			if x <= 1<<16-1 {
				got := TrailingZeros16(u16(x))
				if x == 0 {
					want = 16
				}
				if got != want {
					assert(got == want, "TrailingZeros16 got != want")
				}
			}

			if x <= 1<<32-1 {
				got := TrailingZeros32(u32(x))
				if x == 0 {
					want = 32
				}
				if got != want {
					assert(got == want, "TrailingZeros32 got != want")
				}
				if UintSize == 32 {
					got = TrailingZeros(uint(x))
					if got != want {
						assert(got == want, "TrailingZeros got != want")
					}
				}
			}

			if x <= 1<<64-1 {
				got := TrailingZeros64(u64(x))
				if x == 0 {
					want = 64
				}
				if got != want {
					assert(got == want, "TrailingZeros64 got != want")
				}
				if UintSize == 64 {
					got = TrailingZeros(uint(x))
					if got != want {
						assert(got == want, "TrailingZeros got != want")
					}
				}
			}
		}
	}
}

func TestOnesCount {
	x: u64
	for i := 0; i <= 64; i++ {
		testOnesCount(x, i)
		x = x<<1 | 1
	}

	for i := 64; i >= 0; i-- {
		testOnesCount(x, i)
		x = x << 1
	}

	for i := 0; i < 256; i++ {
		for k := 0; k < 64-8; k++ {
			testOnesCount(u64(i)<<uint(k), tab[i].pop)
		}
	}
}

func testOnesCount(x: u64, want: int) {
	if x <= 1<<8-1 {
		got := OnesCount8(u8(x))
		if got != want {
			assert(got == want, "OnesCount8 got != want")
		}
	}

	if x <= 1<<16-1 {
		got := OnesCount16(u16(x))
		if got != want {
			assert(got == want, "OnesCount16 got != want")
		}
	}

	if x <= 1<<32-1 {
		got := OnesCount32(u32(x))
		if got != want {
			assert(got == want, "OnesCount32 got != want")
		}
		if UintSize == 32 {
			got = OnesCount(uint(x))
			if got != want {
				assert(got == want, "OnesCount got != want")
			}
		}
	}

	if x <= 1<<64-1 {
		got := OnesCount64(u64(x))
		if got != want {
			assert(got == want, "OnesCount64 got != want")
		}
		if UintSize == 64 {
			got = OnesCount(uint(x))
			if got != want {
				assert(got == want, "OnesCount got != want")
			}
		}
	}
}

func TestRotateLeft {
	m: u64 = DeBruijn64

	for k := uint(0); k < 128; k++ {
		x8 := u8(m)
		got8 := RotateLeft8(x8, int(k))
		want8 := x8<<(k&0x7) | x8>>(8-k&0x7)
		if got8 != want8 {
			assert(got8 == want8, "RotateLeft8 got != want")
		}
		got8 = RotateLeft8(want8, -int(k))
		if got8 != x8 {
			assert(got8 == x8, "RotateLeft8 got != want")
		}

		x16 := u16(m)
		got16 := RotateLeft16(x16, int(k))
		want16 := x16<<(k&0xf) | x16>>(16-k&0xf)
		if got16 != want16 {
			assert(got16 == want16, "RotateLeft16 got != want")
		}
		got16 = RotateLeft16(want16, -int(k))
		if got16 != x16 {
			assert(got16 == x16, "RotateLeft16 got != want")
		}

		x32 := uint32(m)
		got32 := RotateLeft32(x32, int(k))
		want32 := x32<<(k&0x1f) | x32>>(32-k&0x1f)
		if got32 != want32 {
			assert(got32 == want32, "RotateLeft32 got != want")
		}
		got32 = RotateLeft32(want32, -int(k))
		if got32 != x32 {
			assert(got32 == x32, "RotateLeft32 got != want")
		}
		if UintSize == 32 {
			x := uint(m)
			got := RotateLeft(x, int(k))
			want := x<<(k&0x1f) | x>>(32-k&0x1f)
			if got != want {
				assert(got == want, "RotateLeft got != want")
			}
			got = RotateLeft(want, -int(k))
			if got != x {
				assert(got == x, "RotateLeft got != want")
			}
		}

		x64 := u64(m)
		got64 := RotateLeft64(x64, int(k))
		want64 := x64<<(k&0x3f) | x64>>(64-k&0x3f)
		if got64 != want64 {
			assert(got64 == want64, "RotateLeft64 got != want")
		}
		got64 = RotateLeft64(want64, -int(k))
		if got64 != x64 {
			assert(got64 == x64, "RotateLeft64 got != want")
		}
		if UintSize == 64 {
			x := uint(m)
			got := RotateLeft(x, int(k))
			want := x<<(k&0x3f) | x>>(64-k&0x3f)
			if got != want {
				assert(got == want, "RotateLeft got != want")
			}
			got = RotateLeft(want, -int(k))
			if got != x {
				assert(got == x, "RotateLeft got != want")
			}
		}
	}
}

func TestReverse {
	// test each bit
	for i := uint(0); i < 64; i++ {
		testReverse(u64(1)<<i, u64(1)<<(63-i))
	}

	// test a few patterns
	for _, test := range []struct {
		x, r: u64
	}{
		{0, 0},
		{0x1, 0x8 << 60},
		{0x2, 0x4 << 60},
		{0x3, 0xc << 60},
		{0x4, 0x2 << 60},
		{0x5, 0xa << 60},
		{0x6, 0x6 << 60},
		{0x7, 0xe << 60},
		{0x8, 0x1 << 60},
		{0x9, 0x9 << 60},
		{0xa, 0x5 << 60},
		{0xb, 0xd << 60},
		{0xc, 0x3 << 60},
		{0xd, 0xb << 60},
		{0xe, 0x7 << 60},
		{0xf, 0xf << 60},
		{0x5686487, 0xe12616a000000000},
		{0x0123456789abcdef, 0xf7b3d591e6a2c480},
	} {
		testReverse(test.x, test.r)
		testReverse(test.r, test.x)
	}
}

func testReverse(x64, want64: u64) {
	x8 := u8(x64)
	got8 := Reverse8(x8)
	want8 := u8(want64 >> (64 - 8))
	if got8 != want8 {
		assert(got8 == want8, "Reverse8 got != want")
	}

	x16 := u16(x64)
	got16 := Reverse16(x16)
	want16 := u16(want64 >> (64 - 16))
	if got16 != want16 {
		assert(got16 == want16, "Reverse16 got != want")
	}

	x32 := u32(x64)
	got32 := Reverse32(x32)
	want32 := u32(want64 >> (64 - 32))
	if got32 != want32 {
		assert(got32 == want32, "Reverse32 got != want")
	}
	if UintSize == 32 {
		x := uint(x32)
		got := Reverse(x)
		want := uint(want32)
		if got != want {
			assert(got == want, "Reverse got != want")
		}
	}

	got64 := Reverse64(x64)
	if got64 != want64 {
		assert(got64 == want64, "Reverse64 got != want")
	}
	if UintSize == 64 {
		x := uint(x64)
		got := Reverse(x)
		want := uint(want64)
		if got != want {
			assert(got == want, "Reverse got != want")
		}
	}
}

func TestReverseBytes {
	for _, test := range []struct {
		x, r: uint64
	}{
		{0, 0},
		{0x01, 0x01 << 56},
		{0x0123, 0x2301 << 48},
		{0x012345, 0x452301 << 40},
		{0x01234567, 0x67452301 << 32},
		{0x0123456789, 0x8967452301 << 24},
		{0x0123456789ab, 0xab8967452301 << 16},
		{0x0123456789abcd, 0xcdab8967452301 << 8},
		{0x0123456789abcdef, 0xefcdab8967452301 << 0},
	} {
		testReverseBytes(test.x, test.r)
		testReverseBytes(test.r, test.x)
	}
}

func testReverseBytes(x64, want64: u64) {
	x16 := u16(x64)
	got16 := ReverseBytes16(x16)
	want16 := u16(want64 >> (64 - 16))
	if got16 != want16 {
		assert(got16 == want16, "ReverseBytes16 got != want")
	}

	x32 := u32(x64)
	got32 := ReverseBytes32(x32)
	want32 := u32(want64 >> (64 - 32))
	if got32 != want32 {
		assert(got32 == want32, "ReverseBytes32 got != want")
	}
	if UintSize == 32 {
		x := uint(x32)
		got := ReverseBytes(x)
		want := uint(want32)
		if got != want {
			assert(got == want, "ReverseBytes got != want")
		}
	}

	got64 := ReverseBytes64(x64)
	if got64 != want64 {
		assert(got64 == want64, "ReverseBytes64 got != want")
	}
	if UintSize == 64 {
		x := uint(x64)
		got := ReverseBytes(x)
		want := uint(want64)
		if got != want {
			assert(got == want, "ReverseBytes got != want")
		}
	}
}

func TestLen {
	for i := 0; i < 256; i++ {
		len := 8 - tab[i].nlz
		for k := 0; k < 64-8; k++ {
			x := u64(i) << uint(k)
			want := 0
			if x != 0 {
				want = len + k
			}
			if x <= 1<<8-1 {
				got := Len8(u8(x))
				if got != want {
					assert(got == want, "Len8 got != want")
				}
			}

			if x <= 1<<16-1 {
				got := Len16(u16(x))
				if got != want {
					assert(got == want, "Len16 got != want")
				}
			}

			if x <= 1<<32-1 {
				got := Len32(u32(x))
				if got != want {
					assert(got == want, "Len32 got != want")
				}
				if UintSize == 32 {
					got := Len(uint(x))
					if got != want {
						assert(got == want, "Len got != want")
					}
				}
			}

			if x <= 1<<64-1 {
				got := Len64(u64(x))
				if got != want {
					assert(got == want, "Len64 got != want")
				}
				if UintSize == 64 {
					got := Len(uint(x))
					if got != want {
						assert(got == want, "Len got != want")
					}
				}
			}
		}
	}
}

func TestRem32 {
	// Sanity check: for non-oveflowing dividends, the result is the
	// same as the rem returned by Div32
	hi, lo, y := u32(510510), u32(9699690), u32(510510+1) // ensure hi < y
	for i := 0; i < 1000; i++ {
		r := Rem32(hi, lo, y)
		_, r2 := Div32(hi, lo, y)
		if r != r2 {
			assert(false, "Rem32 failed")
		}
		y += 13
	}
}

func TestRem32Overflow {
	// To trigger a quotient overflow, we need y <= hi
	hi, lo, y := u32(510510), u32(9699690), u32(7)
	for i := 0; i < 1000; i++ {
		r := Rem32(hi, lo, y)
		_, r2 := Div64(0, u64(hi)<<32|u64(lo), u64(y))
		if r != u32(r2) {
			assert(false, "Rem32 failed")
		}
		y += 13
	}
}

func TestRem64 {
	// Sanity check: for non-oveflowing dividends, the result is the
	// same as the rem returned by Div64
	hi, lo, y := u64(510510), u64(9699690), u64(510510+1) // ensure hi < y
	for i := 0; i < 1000; i++ {
		r := Rem64(hi, lo, y)
		_, r2 := Div64(hi, lo, y)
		if r != r2 {
			assert(false, "Rem64 failed")
		}
		y += 13
	}
}

func TestRem64Overflow {
	Rem64Tests := []struct {
		hi, lo, y: u64
		rem:       u64
	}{
		// Testcases computed using Python 3, as:
		//   >>> hi = 42; lo = 1119; y = 42
		//   >>> ((hi<<64)+lo) % y
		{42, 1119, 42, 27},
		{42, 1119, 38, 9},
		{42, 1119, 26, 23},
		{469, 0, 467, 271},
		{469, 0, 113, 58},
		{111111, 111111, 1171, 803},
		{3968194946088682615, 3192705705065114702, 1000037, 56067},
	}

	for _, rt := range Rem64Tests {
		if rt.hi < rt.y {
			assert(false, "Rem64 is not a test with quo overflow")
		}
		rem := Rem64(rt.hi, rt.lo, rt.y)
		if rem != rt.rem {
			assert(false, "Rem64 failed")
		}
	}
}
